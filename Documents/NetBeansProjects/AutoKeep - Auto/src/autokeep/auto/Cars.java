/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autokeep.auto;

import autokeep.auto.AdminModels.VehicleModel;
import autokeep.auto.Communication.AdminSocket;
import autokeep.auto.Communication.MessageControl;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URL;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yuval
 */
public class Cars extends javax.swing.JFrame {

    /**
     * Creates new form Users
     */
    DefaultTableModel tableModel;
    List<VehicleModel> carsList;

    private void setCarsList() {
        this.carsList.clear();
        while (!AdminSocket.getCarsList().isEmpty()) {
            this.carsList.add(AdminSocket.getCarsList().poll());
        }
    }

    public Cars() {
        this.carsList = new ArrayList<>();
        initComponents();
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        tableModel = (DefaultTableModel) carsTable.getModel();
        if (AdminSocket.getCarsList() == null) {
            MessageControl.getInstance().sendError("The DB is Empty !");
        } else {
            setCarsList();
            displayItems();

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        carsTable = new javax.swing.JTable();
        returnButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        manufactureText = new javax.swing.JTextField();
        clearFileds = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        plateText = new javax.swing.JTextField();
        activeText = new javax.swing.JComboBox<>();
        idSpinner = new javax.swing.JLabel();
        modelText = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        imageText = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        typeText = new javax.swing.JComboBox<>();
        yearText = new javax.swing.JFormattedTextField();
        seatsText = new javax.swing.JComboBox<>();
        capacityText = new javax.swing.JFormattedTextField();
        kmText = new javax.swing.JFormattedTextField();
        imagePNG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        carsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plate", "Manufacture", "Model", "Type", "Year", "Seats", "Capacity", "KM", "Image", "Active"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        carsTable.setColumnSelectionAllowed(true);
        carsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(carsTable);
        carsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        newButton.setText("New Car");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Cars Menu");

        jLabel2.setText("Plate");

        jLabel4.setText("Manufacture");

        jLabel6.setText("Model");

        jLabel8.setText("Year");

        jLabel9.setText("Type");

        jLabel10.setText("Seats");

        jLabel11.setText("Active");

        manufactureText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                manufactureTextFocusLost(evt);
            }
        });

        clearFileds.setText("Clear Fields");
        clearFileds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFiledsActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        plateText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                plateTextFocusLost(evt);
            }
        });
        plateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plateTextActionPerformed(evt);
            }
        });

        activeText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "True", "False" }));

        jLabel5.setText("Capacity");

        jLabel7.setText("Km");

        imageText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                imageTextFocusLost(evt);
            }
        });
        imageText.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                imageTextInputMethodTextChanged(evt);
            }
        });

        jLabel12.setText("Car Image");

        typeText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Family", "Mini Van", "Commercial", " " }));

        yearText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy"))));

        seatsText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "7", "9", "11" }));

        try {
            capacityText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        kmText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        imagePNG.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        imagePNG.setDebugGraphicsOptions(javax.swing.DebugGraphics.FLASH_OPTION);
        imagePNG.setMaximumSize(new java.awt.Dimension(100, 200));
        imagePNG.setMinimumSize(new java.awt.Dimension(100, 200));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(idSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(513, 513, 513))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(425, 425, 425))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(clearFileds, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(imageText))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(imagePNG, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 762, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(manufactureText, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                                    .addComponent(modelText, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                                    .addComponent(plateText, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                                    .addComponent(activeText, 0, 213, Short.MAX_VALUE)
                                    .addComponent(typeText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(yearText)
                                    .addComponent(seatsText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(capacityText)
                                    .addComponent(kmText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(manufactureText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(modelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(plateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(typeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(seatsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(capacityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(kmText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(activeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(imageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imagePNG, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnButton)
                    .addComponent(deleteButton)
                    .addComponent(updateButton)
                    .addComponent(newButton)
                    .addComponent(clearFileds)
                    .addComponent(refreshButton))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        Menu adminMenu = new Menu();
        adminMenu.setVisible(true);
        dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked

    }//GEN-LAST:event_refreshButtonMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshData();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void carsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carsTableMouseClicked
        int row = carsTable.getSelectedRow();
        showItem(carsList.get(row));
    }//GEN-LAST:event_carsTableMouseClicked

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        if (checkFields()) {
            try {
                AdminSocket.getInstance().SendCarsData(addItem(), "New");
                MessageControl.getInstance().sendMSG();
                refreshData();
            } catch (IOException ex) {
                Logger.getLogger(Cars.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            MessageControl.getInstance().sendError("Some Filleds are empty!\n\nPlease fill again");
        }

    }//GEN-LAST:event_newButtonActionPerformed

    private void clearFiledsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFiledsActionPerformed
        clearFields();
    }//GEN-LAST:event_clearFiledsActionPerformed

    private void manufactureTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_manufactureTextFocusLost

    }//GEN-LAST:event_manufactureTextFocusLost

    private void plateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plateTextActionPerformed

    private void plateTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_plateTextFocusLost
        
        if (!plateText.getText().matches("^\\d{2}-?\\d{3}-?\\d{2}$|^\\d{3}-?\\d{2}-?\\d{3}$") && (!plateText.getText().isEmpty())) {
            MessageControl.getInstance().sendError("Wrong Plate!!\n"
                    + "\nPlease type again\n"
                    + "only XX-XXX-XX , XXX-XX-XXX format!");
            plateText.setText("");

        }

    }//GEN-LAST:event_plateTextFocusLost

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int row = carsTable.getSelectedRow();
        if (row > -1) {
            carsList.get(row).setPlateNumber(plateText.getText());
            carsList.get(row).setManufactureName(manufactureText.getText());
            carsList.get(row).setModel(modelText.getText());
            carsList.get(row).setVehicleType(typeText.getSelectedItem().toString());
            carsList.get(row).setManufactureYear(Integer.valueOf(yearText.getText()));
            carsList.get(row).setSeatsNumber(getSeats(seatsText.getSelectedIndex()));
            carsList.get(row).setEngineCapacity(Integer.valueOf(capacityText.getText()));
            carsList.get(row).setIsUsable(isCarActive());
            carsList.get(row).setKilometers(Integer.valueOf(kmText.getText()));
            carsList.get(row).setVehicleImage(imageText.getText());
            if (checkFields()) {
                try {
                    AdminSocket.getInstance().SendCarsData(carsList.get(row), "Update");
                    MessageControl.getInstance().sendMSG();
                    refreshData();
                } catch (IOException ex) {
                    Logger.getLogger(Cars.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                MessageControl.getInstance().sendError("Some Filleds are empty!\n\nPlease fill again");
            }
            clearFields();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = carsTable.getSelectedRow();
        if (row > -1) {
            try {
                AdminSocket.getInstance().SendCarsData(carsList.get(row), "Delete");
                MessageControl.getInstance().sendMSG();
                carsList.remove(row);
                refreshData();
            } catch (IOException ex) {
                Logger.getLogger(Cars.class.getName()).log(Level.SEVERE, null, ex);
            }

            clearFields();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void imageTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_imageTextFocusLost
        setCarImage();
    }//GEN-LAST:event_imageTextFocusLost

    private void imageTextInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_imageTextInputMethodTextChanged
        setCarImage();
    }//GEN-LAST:event_imageTextInputMethodTextChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Cars().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> activeText;
    private javax.swing.JFormattedTextField capacityText;
    private javax.swing.JTable carsTable;
    private javax.swing.JButton clearFileds;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel idSpinner;
    private javax.swing.JLabel imagePNG;
    private javax.swing.JFormattedTextField imageText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField kmText;
    private javax.swing.JTextField manufactureText;
    private javax.swing.JFormattedTextField modelText;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField plateText;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JComboBox<String> seatsText;
    private javax.swing.JComboBox<String> typeText;
    private javax.swing.JButton updateButton;
    private javax.swing.JFormattedTextField yearText;
    // End of variables declaration//GEN-END:variables

    public void showItem(VehicleModel item) {
        plateText.setText(item.getPlateNumber());
        manufactureText.setText(item.getManufactureName());
        modelText.setText(item.getModel());
        typeText.setSelectedItem(item.getVehicleType());
        yearText.setText(String.valueOf(item.getManufactureYear()));
        seatsText.setSelectedItem(String.valueOf(item.getSeatsNumber()));
        capacityText.setText(String.valueOf(item.getEngineCapacity()));
        kmText.setText(String.valueOf(item.getKilometers()));
        imageText.setText(item.getVehicleImage());
        activeText.setSelectedIndex(getIsAdmin(item.getIsUsable()));
        setCarImage();
    }

    public int getIsAdmin(boolean data) {
        if (!data) {
            return 1;
        }
        return 0;
    }

    public int getSeats(int pos) {
        switch (pos) {
            case 0:
                return 5;
            case 1:
                return 7;
            case 2:
                return 9;
            case 3:
                return 11;
            default:
                return 0;
        }
    }

    public boolean isCarActive() {
        return activeText.getSelectedIndex() == 0;
    }

    public VehicleModel addItem() {
        return new VehicleModel(
                plateText.getText(),
                manufactureText.getText(),
                modelText.getText(),
                typeText.getSelectedItem().toString(),
                Integer.valueOf(yearText.getText()),
                Integer.valueOf(seatsText.getSelectedItem().toString()),
                Integer.valueOf(capacityText.getText()),
                isActive(),
                Integer.valueOf(kmText.getText()),
                imageText.getText()
        );
    }

    public void clearFields() {
        plateText.setText("");
        manufactureText.setText("");
        modelText.setText("");
        yearText.setText("");
        capacityText.setText("");
        kmText.setText("");
        imageText.setText("");
        setCarImage();
    }

    private void displayItems() {
        tableModel.setRowCount(0);
        carsList.forEach(item -> {
            Object[] rowdata = new Object[]{item.getPlateNumber(), item.getManufactureName(), item.getModel(), item.getVehicleType(),
                item.getManufactureYear(), item.getSeatsNumber(), item.getEngineCapacity(), item.getKilometers(),
                item.getVehicleImage(), item.getIsUsable()};
            tableModel.insertRow(tableModel.getRowCount(), rowdata);
        });
    }

    public boolean checkFields() {
        return !(plateText.getText().isEmpty()
                || manufactureText.getText().isEmpty()
                || modelText.getText().isEmpty()
                || plateText.getText().isEmpty()
                || yearText.getText().isEmpty()
                || capacityText.getText().isEmpty()
                || kmText.getText().isEmpty()
                || imageText.getText().isEmpty());
    }

    private void refreshData() {
        try {
            AdminSocket.getInstance().SendCars();
            setCarsList();
        } catch (IOException ex) {
            Logger.getLogger(Cars.class.getName()).log(Level.SEVERE, null, ex);
        }
        displayItems();
        clearFields();
    }

    private void setCarImage() {
        ImageIcon imgnew = null;
        try {
            imgnew = new ImageIcon(ImageIO.read(new URL(imageText.getText())).getScaledInstance(260, 200, Image.SCALE_SMOOTH));
        } catch (IOException ex) {
            try {
                imgnew = new ImageIcon(ImageIO.read(new File("C:\\Users\\Yuval\\Documents\\NetBeansProjects\\AutoKeep - Auto\\src\\autokeep\\auto\\Pic\\NA.jpg")).getScaledInstance(260, 200, Image.SCALE_SMOOTH));
            } catch (IOException ex1) {
                Logger.getLogger(Cars.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        imagePNG.setIcon(imgnew);
    }

}
